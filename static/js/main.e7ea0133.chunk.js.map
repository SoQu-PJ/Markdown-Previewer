{"version":3,"sources":["Components/EditorSection.js","Components/PreviewerSection.js","Components/MarkdownPreviewer.js","App.js","reportWebVitals.js","index.js"],"names":["EditorSection","props","_useState","useState","_useState2","Object","slicedToArray","scale","setScale","react_default","a","createElement","className","concat","onClick","document","querySelector","style","display","id","value","textareaValue","onChange","e","setTextareaValue","target","PreviewerSection","react_markdown","children","remarkPlugins","remarkGfm","MarkdownPreviewer","Components_EditorSection","Components_PreviewerSection","App","MarkdownPreviewer_MarkdownPreviewer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"mOA2BeA,SAxBO,SAAAC,GAAQ,IAAAC,EAEAC,oBAAS,GAAMC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAlCK,EAAKH,EAAA,GAAEI,EAAQJ,EAAA,GAQtB,OACIK,EAAAC,EAAAC,cAAA,WAASC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAA2B,SAExCH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,MAAAC,OAASN,EAA0B,cAAlB,iBAAmCO,QAXvD,WACjBN,GAAUD,GACVQ,SAASC,cAAc,YAAYC,MAAMC,QAAO,GAAAL,OAAON,EAAiB,QAAT,YAW3DE,EAAAC,EAAAC,cAAA,YAAUQ,GAAG,SAASP,UAAS,GAAAC,OAAKN,EAAQ,QAAU,IAAMa,MAAOnB,EAAMoB,cAAeC,SAAU,SAAAC,GAAC,OAAItB,EAAMuB,iBAAiBD,EAAEE,OAAOL,6BCQpIM,EAvBU,SAAAzB,GAAS,IAAAC,EACJC,oBAAS,GAAMC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAlCK,EAAKH,EAAA,GAAEI,EAAQJ,EAAA,GAQtB,OACIK,EAAAC,EAAAC,cAAA,WAASQ,GAAG,WACRV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAA2B,YAExCH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,MAAAC,OAASN,EAA0B,cAAlB,iBAAmCO,QAXvD,WACjBN,GAAUD,GACVQ,SAASC,cAAc,mBAAmBC,MAAMC,QAAO,GAAAL,OAAON,EAAiB,QAAT,YAWlEE,EAAAC,EAAAC,cAAA,OAAKC,UAAS,oBAAAC,OAAsBN,EAAQ,QAAU,KAClDE,EAAAC,EAAAC,cAACgB,EAAA,EAAa,CAACC,SAAU3B,EAAMoB,cAAeQ,cAAe,CAACC,UCjBjEC,EAAoB,WAAM,IAAA7B,EACOC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA/CmB,EAAajB,EAAA,GAAEoB,EAAgBpB,EAAA,GAEtC,OACAK,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BACZH,EAAAC,EAAAC,cAACqB,EAAa,CAACR,iBAAkBA,EAAkBH,cAAeA,IAClEZ,EAAAC,EAAAC,cAACsB,EAAgB,CAACZ,cAAeA,MCF1Ba,MANf,WACE,OACEzB,EAAAC,EAAAC,cAACwB,EAAiB,OCOPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAhB,EAAA,GAAAiB,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWlC,SAASmC,eAAe,SACpDC,OACH1C,EAAAC,EAAAC,cAACF,EAAAC,EAAM0C,WAAU,KACf3C,EAAAC,EAAAC,cAAC0C,EAAG,QAORjB","file":"static/js/main.e7ea0133.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst EditorSection = props =>{\r\n\r\n    const [scale, setScale] = useState(false);\r\n\r\n    const scaleHandler = () =>{\r\n        setScale(!scale);\r\n        document.querySelector(\"#preview\").style.display = `${!scale ? \"none\" : \"block\"}`;\r\n            \r\n    }   \r\n\r\n    return(\r\n        <section className=\"editor-section\">\r\n            <nav className=\"editor-nav\">\r\n                <i className=\"fa fa-free-code-camp\"></i> \r\n                Editor \r\n                <i className={`fa ${!scale ? \"fa-arrows-alt\" : \"fa-compress\"}`} onClick={scaleHandler}></i>\r\n            </nav>\r\n            <textarea id=\"editor\" className={`${scale ? \"scale\" : \"\"}`} value={props.textareaValue} onChange={e => props.setTextareaValue(e.target.value)}>\r\n            \r\n            </textarea>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default EditorSection;","import React, {useState} from \"react\";\r\nimport \"../App.css\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport remarkGfm from 'remark-gfm'\r\n\r\nconst PreviewerSection = props => {\r\n    const [scale, setScale] = useState(false);\r\n\r\n    const scaleHandler = () =>{\r\n        setScale(!scale);\r\n        document.querySelector(\".editor-section\").style.display = `${!scale ? \"none\" : \"block\"}`;\r\n            \r\n    }  \r\n\r\n    return (\r\n        <section id=\"preview\">\r\n            <nav className=\"previewer-nav\">\r\n                <i className=\"fa fa-free-code-camp\"></i> \r\n                Previewer \r\n                <i className={`fa ${!scale ? \"fa-arrows-alt\" : \"fa-compress\"}`} onClick={scaleHandler}></i>\r\n            </nav>\r\n            <div className={`markdown-section ${scale ? \"scale\" : \"\"}`}>\r\n                <ReactMarkdown children={props.textareaValue} remarkPlugins={[remarkGfm]} />\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default PreviewerSection;","import React, {useState} from \"react\"\r\nimport \"../App.css\";\r\nimport  EditorSection  from \"./EditorSection\";\r\nimport  PreviewerSection  from \"./PreviewerSection\";\r\n\r\nexport const MarkdownPreviewer = () => {\r\n    const [textareaValue, setTextareaValue] = useState(\"\");\r\n\r\n    return (\r\n    <main className=\"markdown-previewer-section\">\r\n        <EditorSection setTextareaValue={setTextareaValue} textareaValue={textareaValue}/>\r\n        <PreviewerSection textareaValue={textareaValue} />\r\n    </main>\r\n    );\r\n}","import React from \"react\";\nimport { MarkdownPreviewer } from \"./Components/MarkdownPreviewer\";\n\nfunction App() {\n  return (\n    <MarkdownPreviewer />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}