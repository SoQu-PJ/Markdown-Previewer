{"version":3,"sources":["Components/EditorSection.js","Components/PreviewerSection.js","Components/MarkdownPreviewer.js","App.js","reportWebVitals.js","index.js"],"names":["EditorSection","props","react_default","a","createElement","className","id","value","textareaValue","onChange","e","setTextareaValue","target","PreviewerSection","react_markdown","children","remarkPlugins","remarkGfm","MarkdownPreviewer","_useState","useState","_useState2","Object","slicedToArray","EditorSection_EditorSection","PreviewerSection_PreviewerSection","App","MarkdownPreviewer_MarkdownPreviewer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"mOAGaA,SAAgB,SAAAC,GAGzB,OACIC,EAAAC,EAAAC,cAAA,WAASC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAA2B,WAAQH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBACzFH,EAAAC,EAAAC,cAAA,YAAUE,GAAG,SAASC,MAAON,EAAMO,cAAeC,SAAU,SAAAC,GAAC,OAAIT,EAAMU,iBAAiBD,EAAEE,OAAOL,6BCJhGM,EAAmB,SAAAZ,GAC5B,OACIC,EAAAC,EAAAC,cAAA,WAASE,GAAG,WACRJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAgBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAA2B,cAAWH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAC/FH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAACU,EAAA,EAAa,CAACC,SAAUd,EAAMO,cAAeQ,cAAe,CAACC,UCLjEC,EAAoB,WAAM,IAAAC,EACOC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA/CX,EAAaa,EAAA,GAAEV,EAAgBU,EAAA,GAEtC,OACAnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,8BACdH,EAAAC,EAAAC,cAACoB,EAAa,CAACb,iBAAkBA,EAAkBH,cAAeA,IAClEN,EAAAC,EAAAC,cAACqB,EAAgB,CAACjB,cAAeA,MCF1BkB,MANf,WACE,OACExB,EAAAC,EAAAC,cAACuB,EAAiB,OCOPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAArB,EAAA,GAAAsB,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1C,EAAAC,EAAAC,cAACF,EAAAC,EAAM0C,WAAU,KACf3C,EAAAC,EAAAC,cAAC0C,EAAG,QAORlB","file":"static/js/main.33e1fcfe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nexport const EditorSection = props =>{\r\n   \r\n\r\n    return(\r\n        <section className=\"editor-section\">\r\n            <nav className=\"editor-nav\"><i className=\"fa fa-free-code-camp\"></i> Editor <i className=\"fa fa-arrows-alt\"></i></nav>\r\n            <textarea id=\"editor\" value={props.textareaValue} onChange={e => props.setTextareaValue(e.target.value)}>\r\n            \r\n            </textarea>\r\n        </section>\r\n    );\r\n}","import React from \"react\";\r\nimport \"../App.css\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport remarkGfm from 'remark-gfm'\r\n\r\nexport const PreviewerSection = props => {\r\n    return (\r\n        <section id=\"preview\">\r\n            <nav className=\"previewer-nav\"><i className=\"fa fa-free-code-camp\"></i> Previewer <i className=\"fa fa-arrows-alt\"></i></nav>\r\n            <div className=\"markdown-section\">\r\n                <ReactMarkdown children={props.textareaValue} remarkPlugins={[remarkGfm]} />\r\n            </div>\r\n        </section>\r\n    );\r\n}","import React, {useState} from \"react\"\r\nimport \"../App.css\";\r\nimport { EditorSection } from \"./EditorSection\";\r\nimport { PreviewerSection } from \"./PreviewerSection\";\r\n\r\nexport const MarkdownPreviewer = () => {\r\n    const [textareaValue, setTextareaValue] = useState(\"\");\r\n\r\n    return (\r\n    <header className=\"markdown-previewer-section\">\r\n        <EditorSection setTextareaValue={setTextareaValue} textareaValue={textareaValue}/>\r\n        <PreviewerSection textareaValue={textareaValue} />\r\n    </header>\r\n    );\r\n}","import React from \"react\";\nimport { MarkdownPreviewer } from \"./Components/MarkdownPreviewer\";\n\nfunction App() {\n  return (\n    <MarkdownPreviewer />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}